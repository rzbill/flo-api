// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        (unknown)
// source: flo/v1/streams.proto

package flov1

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CreateStreamRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Namespace      string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Name           string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Partitions     int32                  `protobuf:"varint,3,opt,name=partitions,proto3" json:"partitions,omitempty"`                                 // default from server if zero
	RetentionAgeMs int64                  `protobuf:"varint,4,opt,name=retention_age_ms,json=retentionAgeMs,proto3" json:"retention_age_ms,omitempty"` // optional: trim messages older than this age
	MaxLenBytes    int64                  `protobuf:"varint,5,opt,name=max_len_bytes,json=maxLenBytes,proto3" json:"max_len_bytes,omitempty"`          // optional: approximate total bytes cap across partitions
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *CreateStreamRequest) Reset() {
	*x = CreateStreamRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamRequest) ProtoMessage() {}

func (x *CreateStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamRequest.ProtoReflect.Descriptor instead.
func (*CreateStreamRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{0}
}

func (x *CreateStreamRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CreateStreamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateStreamRequest) GetPartitions() int32 {
	if x != nil {
		return x.Partitions
	}
	return 0
}

func (x *CreateStreamRequest) GetRetentionAgeMs() int64 {
	if x != nil {
		return x.RetentionAgeMs
	}
	return 0
}

func (x *CreateStreamRequest) GetMaxLenBytes() int64 {
	if x != nil {
		return x.MaxLenBytes
	}
	return 0
}

type CreateStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateStreamResponse) Reset() {
	*x = CreateStreamResponse{}
	mi := &file_flo_v1_streams_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateStreamResponse) ProtoMessage() {}

func (x *CreateStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateStreamResponse.ProtoReflect.Descriptor instead.
func (*CreateStreamResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{1}
}

type PublishRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	Payload       []byte                 `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Key           string                 `protobuf:"bytes,5,opt,name=key,proto3" json:"key,omitempty"` // for partitioning and idempotency, optional
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishRequest) Reset() {
	*x = PublishRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishRequest) ProtoMessage() {}

func (x *PublishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishRequest.ProtoReflect.Descriptor instead.
func (*PublishRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{2}
}

func (x *PublishRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *PublishRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *PublishRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *PublishRequest) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *PublishRequest) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

type PublishResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PublishResponse) Reset() {
	*x = PublishResponse{}
	mi := &file_flo_v1_streams_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PublishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublishResponse) ProtoMessage() {}

func (x *PublishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublishResponse.ProtoReflect.Descriptor instead.
func (*PublishResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{3}
}

func (x *PublishResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type SubscribeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	Group         string                 `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	StartToken    []byte                 `protobuf:"bytes,4,opt,name=start_token,json=startToken,proto3" json:"start_token,omitempty"`       // optional
	From          string                 `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`                                     // "latest" (default) | "earliest"
	AtMs          int64                  `protobuf:"varint,6,opt,name=at_ms,json=atMs,proto3" json:"at_ms,omitempty"`                        // start at first record with header ts >= at_ms (ms)
	Limit         int32                  `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`                                  // max messages to deliver (0 = no limit)
	Policy        *RetryPolicy           `protobuf:"bytes,8,opt,name=policy,proto3" json:"policy,omitempty"`                                 // optional retry policy to persist/apply for this group
	RetryPaceMs   int64                  `protobuf:"varint,9,opt,name=retry_pace_ms,json=retryPaceMs,proto3" json:"retry_pace_ms,omitempty"` // optional pacing between multiple due retries (ms)
	Filter        string                 `protobuf:"bytes,10,opt,name=filter,proto3" json:"filter,omitempty"`                                // CEL filter (optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{4}
}

func (x *SubscribeRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SubscribeRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *SubscribeRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *SubscribeRequest) GetStartToken() []byte {
	if x != nil {
		return x.StartToken
	}
	return nil
}

func (x *SubscribeRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *SubscribeRequest) GetAtMs() int64 {
	if x != nil {
		return x.AtMs
	}
	return 0
}

func (x *SubscribeRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *SubscribeRequest) GetPolicy() *RetryPolicy {
	if x != nil {
		return x.Policy
	}
	return nil
}

func (x *SubscribeRequest) GetRetryPaceMs() int64 {
	if x != nil {
		return x.RetryPaceMs
	}
	return 0
}

func (x *SubscribeRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type SubscribeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Payload       []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Headers       map[string]string      `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	mi := &file_flo_v1_streams_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{5}
}

func (x *SubscribeResponse) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *SubscribeResponse) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *SubscribeResponse) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

type TailRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	StartToken    []byte                 `protobuf:"bytes,3,opt,name=start_token,json=startToken,proto3" json:"start_token,omitempty"` // optional
	From          string                 `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`                               // "latest"|"earliest"
	AtMs          int64                  `protobuf:"varint,5,opt,name=at_ms,json=atMs,proto3" json:"at_ms,omitempty"`
	Limit         int32                  `protobuf:"varint,6,opt,name=limit,proto3" json:"limit,omitempty"`
	Filter        string                 `protobuf:"bytes,7,opt,name=filter,proto3" json:"filter,omitempty"` // CEL filter (optional)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TailRequest) Reset() {
	*x = TailRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TailRequest) ProtoMessage() {}

func (x *TailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TailRequest.ProtoReflect.Descriptor instead.
func (*TailRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{6}
}

func (x *TailRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *TailRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *TailRequest) GetStartToken() []byte {
	if x != nil {
		return x.StartToken
	}
	return nil
}

func (x *TailRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *TailRequest) GetAtMs() int64 {
	if x != nil {
		return x.AtMs
	}
	return 0
}

func (x *TailRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TailRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Retry policy structure for backoff control
type RetryPolicy struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Type          string                 `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`                                   // "exp" | "exp-jitter" | "fixed" | "none"
	BaseMs        int64                  `protobuf:"varint,2,opt,name=base_ms,json=baseMs,proto3" json:"base_ms,omitempty"`                // base delay in ms
	CapMs         int64                  `protobuf:"varint,3,opt,name=cap_ms,json=capMs,proto3" json:"cap_ms,omitempty"`                   // cap per-attempt delay in ms
	Factor        float64                `protobuf:"fixed64,4,opt,name=factor,proto3" json:"factor,omitempty"`                             // growth factor for exponential
	MaxAttempts   uint32                 `protobuf:"varint,5,opt,name=max_attempts,json=maxAttempts,proto3" json:"max_attempts,omitempty"` // maximum attempts before DLQ
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryPolicy) Reset() {
	*x = RetryPolicy{}
	mi := &file_flo_v1_streams_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryPolicy) ProtoMessage() {}

func (x *RetryPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryPolicy.ProtoReflect.Descriptor instead.
func (*RetryPolicy) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{7}
}

func (x *RetryPolicy) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *RetryPolicy) GetBaseMs() int64 {
	if x != nil {
		return x.BaseMs
	}
	return 0
}

func (x *RetryPolicy) GetCapMs() int64 {
	if x != nil {
		return x.CapMs
	}
	return 0
}

func (x *RetryPolicy) GetFactor() float64 {
	if x != nil {
		return x.Factor
	}
	return 0
}

func (x *RetryPolicy) GetMaxAttempts() uint32 {
	if x != nil {
		return x.MaxAttempts
	}
	return 0
}

type AckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	Group         string                 `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Id            []byte                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckRequest) Reset() {
	*x = AckRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckRequest) ProtoMessage() {}

func (x *AckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckRequest.ProtoReflect.Descriptor instead.
func (*AckRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{8}
}

func (x *AckRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *AckRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *AckRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *AckRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

type AckResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AckResponse) Reset() {
	*x = AckResponse{}
	mi := &file_flo_v1_streams_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AckResponse) ProtoMessage() {}

func (x *AckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AckResponse.ProtoReflect.Descriptor instead.
func (*AckResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{9}
}

type NackRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	Group         string                 `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Id            []byte                 `protobuf:"bytes,4,opt,name=id,proto3" json:"id,omitempty"`
	Error         string                 `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"` // Error message for debugging
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NackRequest) Reset() {
	*x = NackRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NackRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NackRequest) ProtoMessage() {}

func (x *NackRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NackRequest.ProtoReflect.Descriptor instead.
func (*NackRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{10}
}

func (x *NackRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *NackRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *NackRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *NackRequest) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *NackRequest) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type NackResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NackResponse) Reset() {
	*x = NackResponse{}
	mi := &file_flo_v1_streams_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NackResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NackResponse) ProtoMessage() {}

func (x *NackResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NackResponse.ProtoReflect.Descriptor instead.
func (*NackResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{11}
}

// List messages from a stream (partition-scoped), paginated.
type ListMessagesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	Partition     int32                  `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"`                    // default 0 if not set
	StartToken    []byte                 `protobuf:"bytes,4,opt,name=start_token,json=startToken,proto3" json:"start_token,omitempty"` // inclusive; empty to start from boundary
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`                            // max items; 0 means server default
	Reverse       bool                   `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`                        // newest-to-oldest if true
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMessagesRequest) Reset() {
	*x = ListMessagesRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesRequest) ProtoMessage() {}

func (x *ListMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesRequest.ProtoReflect.Descriptor instead.
func (*ListMessagesRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{12}
}

func (x *ListMessagesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListMessagesRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *ListMessagesRequest) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *ListMessagesRequest) GetStartToken() []byte {
	if x != nil {
		return x.StartToken
	}
	return nil
}

func (x *ListMessagesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListMessagesRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type MessageItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"` // 8-byte token
	Payload       []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	Header        []byte                 `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
	Seq           uint64                 `protobuf:"varint,4,opt,name=seq,proto3" json:"seq,omitempty"`
	Partition     uint32                 `protobuf:"varint,5,opt,name=partition,proto3" json:"partition,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MessageItem) Reset() {
	*x = MessageItem{}
	mi := &file_flo_v1_streams_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MessageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageItem) ProtoMessage() {}

func (x *MessageItem) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageItem.ProtoReflect.Descriptor instead.
func (*MessageItem) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{13}
}

func (x *MessageItem) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *MessageItem) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *MessageItem) GetHeader() []byte {
	if x != nil {
		return x.Header
	}
	return nil
}

func (x *MessageItem) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *MessageItem) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type ListMessagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*MessageItem         `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	NextToken     []byte                 `protobuf:"bytes,2,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListMessagesResponse) Reset() {
	*x = ListMessagesResponse{}
	mi := &file_flo_v1_streams_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMessagesResponse) ProtoMessage() {}

func (x *ListMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMessagesResponse.ProtoReflect.Descriptor instead.
func (*ListMessagesResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{14}
}

func (x *ListMessagesResponse) GetItems() []*MessageItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListMessagesResponse) GetNextToken() []byte {
	if x != nil {
		return x.NextToken
	}
	return nil
}

// Stream stats across partitions.
type GetStreamStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStreamStatsRequest) Reset() {
	*x = GetStreamStatsRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamStatsRequest) ProtoMessage() {}

func (x *GetStreamStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamStatsRequest.ProtoReflect.Descriptor instead.
func (*GetStreamStatsRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{15}
}

func (x *GetStreamStatsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetStreamStatsRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

type PartitionStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Partition     uint32                 `protobuf:"varint,1,opt,name=partition,proto3" json:"partition,omitempty"`
	FirstSeq      uint64                 `protobuf:"varint,2,opt,name=first_seq,json=firstSeq,proto3" json:"first_seq,omitempty"`
	LastSeq       uint64                 `protobuf:"varint,3,opt,name=last_seq,json=lastSeq,proto3" json:"last_seq,omitempty"`
	Count         uint64                 `protobuf:"varint,4,opt,name=count,proto3" json:"count,omitempty"`
	Bytes         uint64                 `protobuf:"varint,5,opt,name=bytes,proto3" json:"bytes,omitempty"`
	LastPublishMs uint64                 `protobuf:"varint,6,opt,name=last_publish_ms,json=lastPublishMs,proto3" json:"last_publish_ms,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PartitionStats) Reset() {
	*x = PartitionStats{}
	mi := &file_flo_v1_streams_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PartitionStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartitionStats) ProtoMessage() {}

func (x *PartitionStats) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartitionStats.ProtoReflect.Descriptor instead.
func (*PartitionStats) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{16}
}

func (x *PartitionStats) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *PartitionStats) GetFirstSeq() uint64 {
	if x != nil {
		return x.FirstSeq
	}
	return 0
}

func (x *PartitionStats) GetLastSeq() uint64 {
	if x != nil {
		return x.LastSeq
	}
	return 0
}

func (x *PartitionStats) GetCount() uint64 {
	if x != nil {
		return x.Count
	}
	return 0
}

func (x *PartitionStats) GetBytes() uint64 {
	if x != nil {
		return x.Bytes
	}
	return 0
}

func (x *PartitionStats) GetLastPublishMs() uint64 {
	if x != nil {
		return x.LastPublishMs
	}
	return 0
}

type GetStreamStatsResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Partitions        []*PartitionStats      `protobuf:"bytes,1,rep,name=partitions,proto3" json:"partitions,omitempty"`
	TotalCount        uint64                 `protobuf:"varint,2,opt,name=total_count,json=totalCount,proto3" json:"total_count,omitempty"`
	TotalBytes        uint64                 `protobuf:"varint,3,opt,name=total_bytes,json=totalBytes,proto3" json:"total_bytes,omitempty"`
	ActiveSubscribers int32                  `protobuf:"varint,4,opt,name=active_subscribers,json=activeSubscribers,proto3" json:"active_subscribers,omitempty"`
	LastPublishMs     uint64                 `protobuf:"varint,5,opt,name=last_publish_ms,json=lastPublishMs,proto3" json:"last_publish_ms,omitempty"`
	LastDeliveredMs   uint64                 `protobuf:"varint,6,opt,name=last_delivered_ms,json=lastDeliveredMs,proto3" json:"last_delivered_ms,omitempty"`
	GroupsCount       int32                  `protobuf:"varint,7,opt,name=groups_count,json=groupsCount,proto3" json:"groups_count,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *GetStreamStatsResponse) Reset() {
	*x = GetStreamStatsResponse{}
	mi := &file_flo_v1_streams_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStreamStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStreamStatsResponse) ProtoMessage() {}

func (x *GetStreamStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStreamStatsResponse.ProtoReflect.Descriptor instead.
func (*GetStreamStatsResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{17}
}

func (x *GetStreamStatsResponse) GetPartitions() []*PartitionStats {
	if x != nil {
		return x.Partitions
	}
	return nil
}

func (x *GetStreamStatsResponse) GetTotalCount() uint64 {
	if x != nil {
		return x.TotalCount
	}
	return 0
}

func (x *GetStreamStatsResponse) GetTotalBytes() uint64 {
	if x != nil {
		return x.TotalBytes
	}
	return 0
}

func (x *GetStreamStatsResponse) GetActiveSubscribers() int32 {
	if x != nil {
		return x.ActiveSubscribers
	}
	return 0
}

func (x *GetStreamStatsResponse) GetLastPublishMs() uint64 {
	if x != nil {
		return x.LastPublishMs
	}
	return 0
}

func (x *GetStreamStatsResponse) GetLastDeliveredMs() uint64 {
	if x != nil {
		return x.LastDeliveredMs
	}
	return 0
}

func (x *GetStreamStatsResponse) GetGroupsCount() int32 {
	if x != nil {
		return x.GroupsCount
	}
	return 0
}

// Flush all messages from a stream (or specific partition).
type FlushStreamRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	Partition     int32                  `protobuf:"varint,3,opt,name=partition,proto3" json:"partition,omitempty"` // optional; if not set, flushes all partitions
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlushStreamRequest) Reset() {
	*x = FlushStreamRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlushStreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushStreamRequest) ProtoMessage() {}

func (x *FlushStreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushStreamRequest.ProtoReflect.Descriptor instead.
func (*FlushStreamRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{18}
}

func (x *FlushStreamRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *FlushStreamRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *FlushStreamRequest) GetPartition() int32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

type FlushStreamResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	DeletedCount  uint64                 `protobuf:"varint,1,opt,name=deleted_count,json=deletedCount,proto3" json:"deleted_count,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FlushStreamResponse) Reset() {
	*x = FlushStreamResponse{}
	mi := &file_flo_v1_streams_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FlushStreamResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FlushStreamResponse) ProtoMessage() {}

func (x *FlushStreamResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FlushStreamResponse.ProtoReflect.Descriptor instead.
func (*FlushStreamResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{19}
}

func (x *FlushStreamResponse) GetDeletedCount() uint64 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

// Delete a specific message by ID from a stream.
type DeleteMessageRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	MessageId     []byte                 `protobuf:"bytes,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMessageRequest) Reset() {
	*x = DeleteMessageRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageRequest) ProtoMessage() {}

func (x *DeleteMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageRequest.ProtoReflect.Descriptor instead.
func (*DeleteMessageRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteMessageRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *DeleteMessageRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *DeleteMessageRequest) GetMessageId() []byte {
	if x != nil {
		return x.MessageId
	}
	return nil
}

type DeleteMessageResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DeleteMessageResponse) Reset() {
	*x = DeleteMessageResponse{}
	mi := &file_flo_v1_streams_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteMessageResponse) ProtoMessage() {}

func (x *DeleteMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteMessageResponse.ProtoReflect.Descriptor instead.
func (*DeleteMessageResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{21}
}

type ListRetryMessagesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	Group         string                 `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`                             // optional; if not set, returns all groups
	StartToken    []byte                 `protobuf:"bytes,4,opt,name=start_token,json=startToken,proto3" json:"start_token,omitempty"` // optional; for pagination
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`                            // max items; 0 means server default
	Reverse       bool                   `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`                        // newest-to-oldest if true
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRetryMessagesRequest) Reset() {
	*x = ListRetryMessagesRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRetryMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRetryMessagesRequest) ProtoMessage() {}

func (x *ListRetryMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRetryMessagesRequest.ProtoReflect.Descriptor instead.
func (*ListRetryMessagesRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{22}
}

func (x *ListRetryMessagesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListRetryMessagesRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *ListRetryMessagesRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ListRetryMessagesRequest) GetStartToken() []byte {
	if x != nil {
		return x.StartToken
	}
	return nil
}

func (x *ListRetryMessagesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListRetryMessagesRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type RetryMessageItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // 8-byte token
	Payload       []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"` // original message payload
	Headers       map[string]string      `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Partition     uint32                 `protobuf:"varint,4,opt,name=partition,proto3" json:"partition,omitempty"`
	Seq           uint64                 `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
	RetryCount    uint32                 `protobuf:"varint,6,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`              // current retry attempt
	MaxRetries    uint32                 `protobuf:"varint,7,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`              // maximum retry attempts
	NextRetryAtMs int64                  `protobuf:"varint,8,opt,name=next_retry_at_ms,json=nextRetryAtMs,proto3" json:"next_retry_at_ms,omitempty"` // when this message will be retried
	CreatedAtMs   int64                  `protobuf:"varint,9,opt,name=created_at_ms,json=createdAtMs,proto3" json:"created_at_ms,omitempty"`         // when the message was first created
	LastError     string                 `protobuf:"bytes,10,opt,name=last_error,json=lastError,proto3" json:"last_error,omitempty"`                 // last error message
	Group         string                 `protobuf:"bytes,11,opt,name=group,proto3" json:"group,omitempty"`                                          // consumer group
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryMessageItem) Reset() {
	*x = RetryMessageItem{}
	mi := &file_flo_v1_streams_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryMessageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryMessageItem) ProtoMessage() {}

func (x *RetryMessageItem) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryMessageItem.ProtoReflect.Descriptor instead.
func (*RetryMessageItem) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{23}
}

func (x *RetryMessageItem) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *RetryMessageItem) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *RetryMessageItem) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *RetryMessageItem) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *RetryMessageItem) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *RetryMessageItem) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *RetryMessageItem) GetMaxRetries() uint32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *RetryMessageItem) GetNextRetryAtMs() int64 {
	if x != nil {
		return x.NextRetryAtMs
	}
	return 0
}

func (x *RetryMessageItem) GetCreatedAtMs() int64 {
	if x != nil {
		return x.CreatedAtMs
	}
	return 0
}

func (x *RetryMessageItem) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

func (x *RetryMessageItem) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type ListRetryMessagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*RetryMessageItem    `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	NextToken     []byte                 `protobuf:"bytes,2,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListRetryMessagesResponse) Reset() {
	*x = ListRetryMessagesResponse{}
	mi := &file_flo_v1_streams_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListRetryMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRetryMessagesResponse) ProtoMessage() {}

func (x *ListRetryMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRetryMessagesResponse.ProtoReflect.Descriptor instead.
func (*ListRetryMessagesResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{24}
}

func (x *ListRetryMessagesResponse) GetItems() []*RetryMessageItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListRetryMessagesResponse) GetNextToken() []byte {
	if x != nil {
		return x.NextToken
	}
	return nil
}

type ListDLQMessagesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	Group         string                 `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`                             // optional; if not set, returns all groups
	StartToken    []byte                 `protobuf:"bytes,4,opt,name=start_token,json=startToken,proto3" json:"start_token,omitempty"` // optional; for pagination
	Limit         int32                  `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`                            // max items; 0 means server default
	Reverse       bool                   `protobuf:"varint,6,opt,name=reverse,proto3" json:"reverse,omitempty"`                        // newest-to-oldest if true
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDLQMessagesRequest) Reset() {
	*x = ListDLQMessagesRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDLQMessagesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDLQMessagesRequest) ProtoMessage() {}

func (x *ListDLQMessagesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDLQMessagesRequest.ProtoReflect.Descriptor instead.
func (*ListDLQMessagesRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{25}
}

func (x *ListDLQMessagesRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *ListDLQMessagesRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *ListDLQMessagesRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ListDLQMessagesRequest) GetStartToken() []byte {
	if x != nil {
		return x.StartToken
	}
	return nil
}

func (x *ListDLQMessagesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListDLQMessagesRequest) GetReverse() bool {
	if x != nil {
		return x.Reverse
	}
	return false
}

type DLQMessageItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            []byte                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`           // 8-byte token
	Payload       []byte                 `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"` // original message payload
	Headers       map[string]string      `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Partition     uint32                 `protobuf:"varint,4,opt,name=partition,proto3" json:"partition,omitempty"`
	Seq           uint64                 `protobuf:"varint,5,opt,name=seq,proto3" json:"seq,omitempty"`
	RetryCount    uint32                 `protobuf:"varint,6,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`   // final retry count
	MaxRetries    uint32                 `protobuf:"varint,7,opt,name=max_retries,json=maxRetries,proto3" json:"max_retries,omitempty"`   // maximum retry attempts
	FailedAtMs    int64                  `protobuf:"varint,8,opt,name=failed_at_ms,json=failedAtMs,proto3" json:"failed_at_ms,omitempty"` // when the message failed permanently
	LastError     string                 `protobuf:"bytes,9,opt,name=last_error,json=lastError,proto3" json:"last_error,omitempty"`       // last error message
	Group         string                 `protobuf:"bytes,10,opt,name=group,proto3" json:"group,omitempty"`                               // consumer group
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DLQMessageItem) Reset() {
	*x = DLQMessageItem{}
	mi := &file_flo_v1_streams_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DLQMessageItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DLQMessageItem) ProtoMessage() {}

func (x *DLQMessageItem) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DLQMessageItem.ProtoReflect.Descriptor instead.
func (*DLQMessageItem) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{26}
}

func (x *DLQMessageItem) GetId() []byte {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *DLQMessageItem) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *DLQMessageItem) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *DLQMessageItem) GetPartition() uint32 {
	if x != nil {
		return x.Partition
	}
	return 0
}

func (x *DLQMessageItem) GetSeq() uint64 {
	if x != nil {
		return x.Seq
	}
	return 0
}

func (x *DLQMessageItem) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *DLQMessageItem) GetMaxRetries() uint32 {
	if x != nil {
		return x.MaxRetries
	}
	return 0
}

func (x *DLQMessageItem) GetFailedAtMs() int64 {
	if x != nil {
		return x.FailedAtMs
	}
	return 0
}

func (x *DLQMessageItem) GetLastError() string {
	if x != nil {
		return x.LastError
	}
	return ""
}

func (x *DLQMessageItem) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type ListDLQMessagesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Items         []*DLQMessageItem      `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	NextToken     []byte                 `protobuf:"bytes,2,opt,name=next_token,json=nextToken,proto3" json:"next_token,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListDLQMessagesResponse) Reset() {
	*x = ListDLQMessagesResponse{}
	mi := &file_flo_v1_streams_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListDLQMessagesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListDLQMessagesResponse) ProtoMessage() {}

func (x *ListDLQMessagesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListDLQMessagesResponse.ProtoReflect.Descriptor instead.
func (*ListDLQMessagesResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{27}
}

func (x *ListDLQMessagesResponse) GetItems() []*DLQMessageItem {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListDLQMessagesResponse) GetNextToken() []byte {
	if x != nil {
		return x.NextToken
	}
	return nil
}

type GetRetryDLQStatsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	Group         string                 `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"` // optional; if not set, returns stats for all groups
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRetryDLQStatsRequest) Reset() {
	*x = GetRetryDLQStatsRequest{}
	mi := &file_flo_v1_streams_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRetryDLQStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRetryDLQStatsRequest) ProtoMessage() {}

func (x *GetRetryDLQStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRetryDLQStatsRequest.ProtoReflect.Descriptor instead.
func (*GetRetryDLQStatsRequest) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{28}
}

func (x *GetRetryDLQStatsRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *GetRetryDLQStatsRequest) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *GetRetryDLQStatsRequest) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

type RetryDLQStats struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Namespace     string                 `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Stream        string                 `protobuf:"bytes,2,opt,name=stream,proto3" json:"stream,omitempty"`
	Group         string                 `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	RetryCount    uint32                 `protobuf:"varint,4,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`       // number of messages in retry queue
	DlqCount      uint32                 `protobuf:"varint,5,opt,name=dlq_count,json=dlqCount,proto3" json:"dlq_count,omitempty"`             // number of messages in DLQ
	TotalRetries  uint32                 `protobuf:"varint,6,opt,name=total_retries,json=totalRetries,proto3" json:"total_retries,omitempty"` // total retry attempts across all messages
	SuccessRate   float64                `protobuf:"fixed64,7,opt,name=success_rate,json=successRate,proto3" json:"success_rate,omitempty"`   // success rate percentage (0-100)
	Groups        []string               `protobuf:"bytes,8,rep,name=groups,proto3" json:"groups,omitempty"`                                  // available groups for this stream
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RetryDLQStats) Reset() {
	*x = RetryDLQStats{}
	mi := &file_flo_v1_streams_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RetryDLQStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RetryDLQStats) ProtoMessage() {}

func (x *RetryDLQStats) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RetryDLQStats.ProtoReflect.Descriptor instead.
func (*RetryDLQStats) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{29}
}

func (x *RetryDLQStats) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *RetryDLQStats) GetStream() string {
	if x != nil {
		return x.Stream
	}
	return ""
}

func (x *RetryDLQStats) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *RetryDLQStats) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *RetryDLQStats) GetDlqCount() uint32 {
	if x != nil {
		return x.DlqCount
	}
	return 0
}

func (x *RetryDLQStats) GetTotalRetries() uint32 {
	if x != nil {
		return x.TotalRetries
	}
	return 0
}

func (x *RetryDLQStats) GetSuccessRate() float64 {
	if x != nil {
		return x.SuccessRate
	}
	return 0
}

func (x *RetryDLQStats) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

type GetRetryDLQStatsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Stats         []*RetryDLQStats       `protobuf:"bytes,1,rep,name=stats,proto3" json:"stats,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetRetryDLQStatsResponse) Reset() {
	*x = GetRetryDLQStatsResponse{}
	mi := &file_flo_v1_streams_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetRetryDLQStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRetryDLQStatsResponse) ProtoMessage() {}

func (x *GetRetryDLQStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_flo_v1_streams_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRetryDLQStatsResponse.ProtoReflect.Descriptor instead.
func (*GetRetryDLQStatsResponse) Descriptor() ([]byte, []int) {
	return file_flo_v1_streams_proto_rawDescGZIP(), []int{30}
}

func (x *GetRetryDLQStatsResponse) GetStats() []*RetryDLQStats {
	if x != nil {
		return x.Stats
	}
	return nil
}

var File_flo_v1_streams_proto protoreflect.FileDescriptor

const file_flo_v1_streams_proto_rawDesc = "" +
	"\n" +
	"\x14flo/v1/streams.proto\x12\x06flo.v1\x1a\x1cgoogle/api/annotations.proto\"\xb5\x01\n" +
	"\x13CreateStreamRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x12\n" +
	"\x04name\x18\x02 \x01(\tR\x04name\x12\x1e\n" +
	"\n" +
	"partitions\x18\x03 \x01(\x05R\n" +
	"partitions\x12(\n" +
	"\x10retention_age_ms\x18\x04 \x01(\x03R\x0eretentionAgeMs\x12\"\n" +
	"\rmax_len_bytes\x18\x05 \x01(\x03R\vmaxLenBytes\"\x16\n" +
	"\x14CreateStreamResponse\"\xed\x01\n" +
	"\x0ePublishRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x18\n" +
	"\apayload\x18\x03 \x01(\fR\apayload\x12=\n" +
	"\aheaders\x18\x04 \x03(\v2#.flo.v1.PublishRequest.HeadersEntryR\aheaders\x12\x10\n" +
	"\x03key\x18\x05 \x01(\tR\x03key\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"!\n" +
	"\x0fPublishResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\"\xa7\x02\n" +
	"\x10SubscribeRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x14\n" +
	"\x05group\x18\x03 \x01(\tR\x05group\x12\x1f\n" +
	"\vstart_token\x18\x04 \x01(\fR\n" +
	"startToken\x12\x12\n" +
	"\x04from\x18\x05 \x01(\tR\x04from\x12\x13\n" +
	"\x05at_ms\x18\x06 \x01(\x03R\x04atMs\x12\x14\n" +
	"\x05limit\x18\a \x01(\x05R\x05limit\x12+\n" +
	"\x06policy\x18\b \x01(\v2\x13.flo.v1.RetryPolicyR\x06policy\x12\"\n" +
	"\rretry_pace_ms\x18\t \x01(\x03R\vretryPaceMs\x12\x16\n" +
	"\x06filter\x18\n" +
	" \x01(\tR\x06filter\"\xbb\x01\n" +
	"\x11SubscribeResponse\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\x12@\n" +
	"\aheaders\x18\x03 \x03(\v2&.flo.v1.SubscribeResponse.HeadersEntryR\aheaders\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"\xbb\x01\n" +
	"\vTailRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x1f\n" +
	"\vstart_token\x18\x03 \x01(\fR\n" +
	"startToken\x12\x12\n" +
	"\x04from\x18\x04 \x01(\tR\x04from\x12\x13\n" +
	"\x05at_ms\x18\x05 \x01(\x03R\x04atMs\x12\x14\n" +
	"\x05limit\x18\x06 \x01(\x05R\x05limit\x12\x16\n" +
	"\x06filter\x18\a \x01(\tR\x06filter\"\x8c\x01\n" +
	"\vRetryPolicy\x12\x12\n" +
	"\x04type\x18\x01 \x01(\tR\x04type\x12\x17\n" +
	"\abase_ms\x18\x02 \x01(\x03R\x06baseMs\x12\x15\n" +
	"\x06cap_ms\x18\x03 \x01(\x03R\x05capMs\x12\x16\n" +
	"\x06factor\x18\x04 \x01(\x01R\x06factor\x12!\n" +
	"\fmax_attempts\x18\x05 \x01(\rR\vmaxAttempts\"h\n" +
	"\n" +
	"AckRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x14\n" +
	"\x05group\x18\x03 \x01(\tR\x05group\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\fR\x02id\"\r\n" +
	"\vAckResponse\"\x7f\n" +
	"\vNackRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x14\n" +
	"\x05group\x18\x03 \x01(\tR\x05group\x12\x0e\n" +
	"\x02id\x18\x04 \x01(\fR\x02id\x12\x14\n" +
	"\x05error\x18\x05 \x01(\tR\x05error\"\x0e\n" +
	"\fNackResponse\"\xba\x01\n" +
	"\x13ListMessagesRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x1c\n" +
	"\tpartition\x18\x03 \x01(\x05R\tpartition\x12\x1f\n" +
	"\vstart_token\x18\x04 \x01(\fR\n" +
	"startToken\x12\x14\n" +
	"\x05limit\x18\x05 \x01(\x05R\x05limit\x12\x18\n" +
	"\areverse\x18\x06 \x01(\bR\areverse\"\x7f\n" +
	"\vMessageItem\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\x12\x16\n" +
	"\x06header\x18\x03 \x01(\fR\x06header\x12\x10\n" +
	"\x03seq\x18\x04 \x01(\x04R\x03seq\x12\x1c\n" +
	"\tpartition\x18\x05 \x01(\rR\tpartition\"`\n" +
	"\x14ListMessagesResponse\x12)\n" +
	"\x05items\x18\x01 \x03(\v2\x13.flo.v1.MessageItemR\x05items\x12\x1d\n" +
	"\n" +
	"next_token\x18\x02 \x01(\fR\tnextToken\"M\n" +
	"\x15GetStreamStatsRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\"\xba\x01\n" +
	"\x0ePartitionStats\x12\x1c\n" +
	"\tpartition\x18\x01 \x01(\rR\tpartition\x12\x1b\n" +
	"\tfirst_seq\x18\x02 \x01(\x04R\bfirstSeq\x12\x19\n" +
	"\blast_seq\x18\x03 \x01(\x04R\alastSeq\x12\x14\n" +
	"\x05count\x18\x04 \x01(\x04R\x05count\x12\x14\n" +
	"\x05bytes\x18\x05 \x01(\x04R\x05bytes\x12&\n" +
	"\x0flast_publish_ms\x18\x06 \x01(\x04R\rlastPublishMs\"\xb8\x02\n" +
	"\x16GetStreamStatsResponse\x126\n" +
	"\n" +
	"partitions\x18\x01 \x03(\v2\x16.flo.v1.PartitionStatsR\n" +
	"partitions\x12\x1f\n" +
	"\vtotal_count\x18\x02 \x01(\x04R\n" +
	"totalCount\x12\x1f\n" +
	"\vtotal_bytes\x18\x03 \x01(\x04R\n" +
	"totalBytes\x12-\n" +
	"\x12active_subscribers\x18\x04 \x01(\x05R\x11activeSubscribers\x12&\n" +
	"\x0flast_publish_ms\x18\x05 \x01(\x04R\rlastPublishMs\x12*\n" +
	"\x11last_delivered_ms\x18\x06 \x01(\x04R\x0flastDeliveredMs\x12!\n" +
	"\fgroups_count\x18\a \x01(\x05R\vgroupsCount\"h\n" +
	"\x12FlushStreamRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x1c\n" +
	"\tpartition\x18\x03 \x01(\x05R\tpartition\":\n" +
	"\x13FlushStreamResponse\x12#\n" +
	"\rdeleted_count\x18\x01 \x01(\x04R\fdeletedCount\"k\n" +
	"\x14DeleteMessageRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x1d\n" +
	"\n" +
	"message_id\x18\x03 \x01(\fR\tmessageId\"\x17\n" +
	"\x15DeleteMessageResponse\"\xb7\x01\n" +
	"\x18ListRetryMessagesRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x14\n" +
	"\x05group\x18\x03 \x01(\tR\x05group\x12\x1f\n" +
	"\vstart_token\x18\x04 \x01(\fR\n" +
	"startToken\x12\x14\n" +
	"\x05limit\x18\x05 \x01(\x05R\x05limit\x12\x18\n" +
	"\areverse\x18\x06 \x01(\bR\areverse\"\xad\x03\n" +
	"\x10RetryMessageItem\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\x12?\n" +
	"\aheaders\x18\x03 \x03(\v2%.flo.v1.RetryMessageItem.HeadersEntryR\aheaders\x12\x1c\n" +
	"\tpartition\x18\x04 \x01(\rR\tpartition\x12\x10\n" +
	"\x03seq\x18\x05 \x01(\x04R\x03seq\x12\x1f\n" +
	"\vretry_count\x18\x06 \x01(\rR\n" +
	"retryCount\x12\x1f\n" +
	"\vmax_retries\x18\a \x01(\rR\n" +
	"maxRetries\x12'\n" +
	"\x10next_retry_at_ms\x18\b \x01(\x03R\rnextRetryAtMs\x12\"\n" +
	"\rcreated_at_ms\x18\t \x01(\x03R\vcreatedAtMs\x12\x1d\n" +
	"\n" +
	"last_error\x18\n" +
	" \x01(\tR\tlastError\x12\x14\n" +
	"\x05group\x18\v \x01(\tR\x05group\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"j\n" +
	"\x19ListRetryMessagesResponse\x12.\n" +
	"\x05items\x18\x01 \x03(\v2\x18.flo.v1.RetryMessageItemR\x05items\x12\x1d\n" +
	"\n" +
	"next_token\x18\x02 \x01(\fR\tnextToken\"\xb5\x01\n" +
	"\x16ListDLQMessagesRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x14\n" +
	"\x05group\x18\x03 \x01(\tR\x05group\x12\x1f\n" +
	"\vstart_token\x18\x04 \x01(\fR\n" +
	"startToken\x12\x14\n" +
	"\x05limit\x18\x05 \x01(\x05R\x05limit\x12\x18\n" +
	"\areverse\x18\x06 \x01(\bR\areverse\"\xfe\x02\n" +
	"\x0eDLQMessageItem\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\fR\x02id\x12\x18\n" +
	"\apayload\x18\x02 \x01(\fR\apayload\x12=\n" +
	"\aheaders\x18\x03 \x03(\v2#.flo.v1.DLQMessageItem.HeadersEntryR\aheaders\x12\x1c\n" +
	"\tpartition\x18\x04 \x01(\rR\tpartition\x12\x10\n" +
	"\x03seq\x18\x05 \x01(\x04R\x03seq\x12\x1f\n" +
	"\vretry_count\x18\x06 \x01(\rR\n" +
	"retryCount\x12\x1f\n" +
	"\vmax_retries\x18\a \x01(\rR\n" +
	"maxRetries\x12 \n" +
	"\ffailed_at_ms\x18\b \x01(\x03R\n" +
	"failedAtMs\x12\x1d\n" +
	"\n" +
	"last_error\x18\t \x01(\tR\tlastError\x12\x14\n" +
	"\x05group\x18\n" +
	" \x01(\tR\x05group\x1a:\n" +
	"\fHeadersEntry\x12\x10\n" +
	"\x03key\x18\x01 \x01(\tR\x03key\x12\x14\n" +
	"\x05value\x18\x02 \x01(\tR\x05value:\x028\x01\"f\n" +
	"\x17ListDLQMessagesResponse\x12,\n" +
	"\x05items\x18\x01 \x03(\v2\x16.flo.v1.DLQMessageItemR\x05items\x12\x1d\n" +
	"\n" +
	"next_token\x18\x02 \x01(\fR\tnextToken\"e\n" +
	"\x17GetRetryDLQStatsRequest\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x14\n" +
	"\x05group\x18\x03 \x01(\tR\x05group\"\xf9\x01\n" +
	"\rRetryDLQStats\x12\x1c\n" +
	"\tnamespace\x18\x01 \x01(\tR\tnamespace\x12\x16\n" +
	"\x06stream\x18\x02 \x01(\tR\x06stream\x12\x14\n" +
	"\x05group\x18\x03 \x01(\tR\x05group\x12\x1f\n" +
	"\vretry_count\x18\x04 \x01(\rR\n" +
	"retryCount\x12\x1b\n" +
	"\tdlq_count\x18\x05 \x01(\rR\bdlqCount\x12#\n" +
	"\rtotal_retries\x18\x06 \x01(\rR\ftotalRetries\x12!\n" +
	"\fsuccess_rate\x18\a \x01(\x01R\vsuccessRate\x12\x16\n" +
	"\x06groups\x18\b \x03(\tR\x06groups\"G\n" +
	"\x18GetRetryDLQStatsResponse\x12+\n" +
	"\x05stats\x18\x01 \x03(\v2\x15.flo.v1.RetryDLQStatsR\x05stats2\xd1\x0e\n" +
	"\x0eStreamsService\x12r\n" +
	"\x06Create\x12\x1b.flo.v1.CreateStreamRequest\x1a\x1c.flo.v1.CreateStreamResponse\"-\x82\xd3\xe4\x93\x02':\x01*\"\"/v1/namespaces/{namespace}/streams\x12z\n" +
	"\aPublish\x12\x16.flo.v1.PublishRequest\x1a\x17.flo.v1.PublishResponse\">\x82\xd3\xe4\x93\x028:\x01*\"3/v1/namespaces/{namespace}/streams/{stream}:publish\x12B\n" +
	"\tSubscribe\x12\x18.flo.v1.SubscribeRequest\x1a\x19.flo.v1.SubscribeResponse0\x01\x128\n" +
	"\x04Tail\x12\x13.flo.v1.TailRequest\x1a\x19.flo.v1.SubscribeResponse0\x01\x12y\n" +
	"\x03Ack\x12\x12.flo.v1.AckRequest\x1a\x13.flo.v1.AckResponse\"I\x82\xd3\xe4\x93\x02C:\x01*\">/v1/namespaces/{namespace}/streams/{stream}/groups/{group}:ack\x12}\n" +
	"\x04Nack\x12\x13.flo.v1.NackRequest\x1a\x14.flo.v1.NackResponse\"J\x82\xd3\xe4\x93\x02D:\x01*\"?/v1/namespaces/{namespace}/streams/{stream}/groups/{group}:nack\x12\x9e\x01\n" +
	"\fListMessages\x12\x1b.flo.v1.ListMessagesRequest\x1a\x1c.flo.v1.ListMessagesResponse\"S\x82\xd3\xe4\x93\x02M\x12K/v1/namespaces/{namespace}/streams/{stream}/partitions/{partition}/messages\x12\x84\x01\n" +
	"\bGetStats\x12\x1d.flo.v1.GetStreamStatsRequest\x1a\x1e.flo.v1.GetStreamStatsResponse\"9\x82\xd3\xe4\x93\x023\x121/v1/namespaces/{namespace}/streams/{stream}:stats\x12~\n" +
	"\x05Flush\x12\x1a.flo.v1.FlushStreamRequest\x1a\x1b.flo.v1.FlushStreamResponse\"<\x82\xd3\xe4\x93\x026:\x01*\"1/v1/namespaces/{namespace}/streams/{stream}:flush\x12\x97\x01\n" +
	"\rDeleteMessage\x12\x1c.flo.v1.DeleteMessageRequest\x1a\x1d.flo.v1.DeleteMessageResponse\"I\x82\xd3\xe4\x93\x02C*A/v1/namespaces/{namespace}/streams/{stream}/messages/{message_id}\x12\xd7\x01\n" +
	"\x11ListRetryMessages\x12 .flo.v1.ListRetryMessagesRequest\x1a!.flo.v1.ListRetryMessagesResponse\"}\x82\xd3\xe4\x93\x02wZ3\x121/v1/namespaces/{namespace}/streams/{stream}/retry\x12@/v1/namespaces/{namespace}/streams/{stream}/groups/{group}/retry\x12\xcd\x01\n" +
	"\x0fListDLQMessages\x12\x1e.flo.v1.ListDLQMessagesRequest\x1a\x1f.flo.v1.ListDLQMessagesResponse\"y\x82\xd3\xe4\x93\x02sZ1\x12//v1/namespaces/{namespace}/streams/{stream}/dlq\x12>/v1/namespaces/{namespace}/streams/{stream}/groups/{group}/dlq\x12\xea\x01\n" +
	"\x10GetRetryDLQStats\x12\x1f.flo.v1.GetRetryDLQStatsRequest\x1a .flo.v1.GetRetryDLQStatsResponse\"\x92\x01\x82\xd3\xe4\x93\x02\x8b\x01Z=\x12;/v1/namespaces/{namespace}/streams/{stream}:retry-dlq-stats\x12J/v1/namespaces/{namespace}/streams/{stream}/groups/{group}:retry-dlq-statsB(Z&github.com/rzbill/flo-api/flo/v1;flov1b\x06proto3"

var (
	file_flo_v1_streams_proto_rawDescOnce sync.Once
	file_flo_v1_streams_proto_rawDescData []byte
)

func file_flo_v1_streams_proto_rawDescGZIP() []byte {
	file_flo_v1_streams_proto_rawDescOnce.Do(func() {
		file_flo_v1_streams_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_flo_v1_streams_proto_rawDesc), len(file_flo_v1_streams_proto_rawDesc)))
	})
	return file_flo_v1_streams_proto_rawDescData
}

var file_flo_v1_streams_proto_msgTypes = make([]protoimpl.MessageInfo, 35)
var file_flo_v1_streams_proto_goTypes = []any{
	(*CreateStreamRequest)(nil),       // 0: flo.v1.CreateStreamRequest
	(*CreateStreamResponse)(nil),      // 1: flo.v1.CreateStreamResponse
	(*PublishRequest)(nil),            // 2: flo.v1.PublishRequest
	(*PublishResponse)(nil),           // 3: flo.v1.PublishResponse
	(*SubscribeRequest)(nil),          // 4: flo.v1.SubscribeRequest
	(*SubscribeResponse)(nil),         // 5: flo.v1.SubscribeResponse
	(*TailRequest)(nil),               // 6: flo.v1.TailRequest
	(*RetryPolicy)(nil),               // 7: flo.v1.RetryPolicy
	(*AckRequest)(nil),                // 8: flo.v1.AckRequest
	(*AckResponse)(nil),               // 9: flo.v1.AckResponse
	(*NackRequest)(nil),               // 10: flo.v1.NackRequest
	(*NackResponse)(nil),              // 11: flo.v1.NackResponse
	(*ListMessagesRequest)(nil),       // 12: flo.v1.ListMessagesRequest
	(*MessageItem)(nil),               // 13: flo.v1.MessageItem
	(*ListMessagesResponse)(nil),      // 14: flo.v1.ListMessagesResponse
	(*GetStreamStatsRequest)(nil),     // 15: flo.v1.GetStreamStatsRequest
	(*PartitionStats)(nil),            // 16: flo.v1.PartitionStats
	(*GetStreamStatsResponse)(nil),    // 17: flo.v1.GetStreamStatsResponse
	(*FlushStreamRequest)(nil),        // 18: flo.v1.FlushStreamRequest
	(*FlushStreamResponse)(nil),       // 19: flo.v1.FlushStreamResponse
	(*DeleteMessageRequest)(nil),      // 20: flo.v1.DeleteMessageRequest
	(*DeleteMessageResponse)(nil),     // 21: flo.v1.DeleteMessageResponse
	(*ListRetryMessagesRequest)(nil),  // 22: flo.v1.ListRetryMessagesRequest
	(*RetryMessageItem)(nil),          // 23: flo.v1.RetryMessageItem
	(*ListRetryMessagesResponse)(nil), // 24: flo.v1.ListRetryMessagesResponse
	(*ListDLQMessagesRequest)(nil),    // 25: flo.v1.ListDLQMessagesRequest
	(*DLQMessageItem)(nil),            // 26: flo.v1.DLQMessageItem
	(*ListDLQMessagesResponse)(nil),   // 27: flo.v1.ListDLQMessagesResponse
	(*GetRetryDLQStatsRequest)(nil),   // 28: flo.v1.GetRetryDLQStatsRequest
	(*RetryDLQStats)(nil),             // 29: flo.v1.RetryDLQStats
	(*GetRetryDLQStatsResponse)(nil),  // 30: flo.v1.GetRetryDLQStatsResponse
	nil,                               // 31: flo.v1.PublishRequest.HeadersEntry
	nil,                               // 32: flo.v1.SubscribeResponse.HeadersEntry
	nil,                               // 33: flo.v1.RetryMessageItem.HeadersEntry
	nil,                               // 34: flo.v1.DLQMessageItem.HeadersEntry
}
var file_flo_v1_streams_proto_depIdxs = []int32{
	31, // 0: flo.v1.PublishRequest.headers:type_name -> flo.v1.PublishRequest.HeadersEntry
	7,  // 1: flo.v1.SubscribeRequest.policy:type_name -> flo.v1.RetryPolicy
	32, // 2: flo.v1.SubscribeResponse.headers:type_name -> flo.v1.SubscribeResponse.HeadersEntry
	13, // 3: flo.v1.ListMessagesResponse.items:type_name -> flo.v1.MessageItem
	16, // 4: flo.v1.GetStreamStatsResponse.partitions:type_name -> flo.v1.PartitionStats
	33, // 5: flo.v1.RetryMessageItem.headers:type_name -> flo.v1.RetryMessageItem.HeadersEntry
	23, // 6: flo.v1.ListRetryMessagesResponse.items:type_name -> flo.v1.RetryMessageItem
	34, // 7: flo.v1.DLQMessageItem.headers:type_name -> flo.v1.DLQMessageItem.HeadersEntry
	26, // 8: flo.v1.ListDLQMessagesResponse.items:type_name -> flo.v1.DLQMessageItem
	29, // 9: flo.v1.GetRetryDLQStatsResponse.stats:type_name -> flo.v1.RetryDLQStats
	0,  // 10: flo.v1.StreamsService.Create:input_type -> flo.v1.CreateStreamRequest
	2,  // 11: flo.v1.StreamsService.Publish:input_type -> flo.v1.PublishRequest
	4,  // 12: flo.v1.StreamsService.Subscribe:input_type -> flo.v1.SubscribeRequest
	6,  // 13: flo.v1.StreamsService.Tail:input_type -> flo.v1.TailRequest
	8,  // 14: flo.v1.StreamsService.Ack:input_type -> flo.v1.AckRequest
	10, // 15: flo.v1.StreamsService.Nack:input_type -> flo.v1.NackRequest
	12, // 16: flo.v1.StreamsService.ListMessages:input_type -> flo.v1.ListMessagesRequest
	15, // 17: flo.v1.StreamsService.GetStats:input_type -> flo.v1.GetStreamStatsRequest
	18, // 18: flo.v1.StreamsService.Flush:input_type -> flo.v1.FlushStreamRequest
	20, // 19: flo.v1.StreamsService.DeleteMessage:input_type -> flo.v1.DeleteMessageRequest
	22, // 20: flo.v1.StreamsService.ListRetryMessages:input_type -> flo.v1.ListRetryMessagesRequest
	25, // 21: flo.v1.StreamsService.ListDLQMessages:input_type -> flo.v1.ListDLQMessagesRequest
	28, // 22: flo.v1.StreamsService.GetRetryDLQStats:input_type -> flo.v1.GetRetryDLQStatsRequest
	1,  // 23: flo.v1.StreamsService.Create:output_type -> flo.v1.CreateStreamResponse
	3,  // 24: flo.v1.StreamsService.Publish:output_type -> flo.v1.PublishResponse
	5,  // 25: flo.v1.StreamsService.Subscribe:output_type -> flo.v1.SubscribeResponse
	5,  // 26: flo.v1.StreamsService.Tail:output_type -> flo.v1.SubscribeResponse
	9,  // 27: flo.v1.StreamsService.Ack:output_type -> flo.v1.AckResponse
	11, // 28: flo.v1.StreamsService.Nack:output_type -> flo.v1.NackResponse
	14, // 29: flo.v1.StreamsService.ListMessages:output_type -> flo.v1.ListMessagesResponse
	17, // 30: flo.v1.StreamsService.GetStats:output_type -> flo.v1.GetStreamStatsResponse
	19, // 31: flo.v1.StreamsService.Flush:output_type -> flo.v1.FlushStreamResponse
	21, // 32: flo.v1.StreamsService.DeleteMessage:output_type -> flo.v1.DeleteMessageResponse
	24, // 33: flo.v1.StreamsService.ListRetryMessages:output_type -> flo.v1.ListRetryMessagesResponse
	27, // 34: flo.v1.StreamsService.ListDLQMessages:output_type -> flo.v1.ListDLQMessagesResponse
	30, // 35: flo.v1.StreamsService.GetRetryDLQStats:output_type -> flo.v1.GetRetryDLQStatsResponse
	23, // [23:36] is the sub-list for method output_type
	10, // [10:23] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_flo_v1_streams_proto_init() }
func file_flo_v1_streams_proto_init() {
	if File_flo_v1_streams_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_flo_v1_streams_proto_rawDesc), len(file_flo_v1_streams_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   35,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_flo_v1_streams_proto_goTypes,
		DependencyIndexes: file_flo_v1_streams_proto_depIdxs,
		MessageInfos:      file_flo_v1_streams_proto_msgTypes,
	}.Build()
	File_flo_v1_streams_proto = out.File
	file_flo_v1_streams_proto_goTypes = nil
	file_flo_v1_streams_proto_depIdxs = nil
}
