// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: flo/v1/streams.proto

package flov1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StreamsService_Create_FullMethodName            = "/flo.v1.StreamsService/Create"
	StreamsService_Publish_FullMethodName           = "/flo.v1.StreamsService/Publish"
	StreamsService_Subscribe_FullMethodName         = "/flo.v1.StreamsService/Subscribe"
	StreamsService_Tail_FullMethodName              = "/flo.v1.StreamsService/Tail"
	StreamsService_Ack_FullMethodName               = "/flo.v1.StreamsService/Ack"
	StreamsService_Nack_FullMethodName              = "/flo.v1.StreamsService/Nack"
	StreamsService_ListMessages_FullMethodName      = "/flo.v1.StreamsService/ListMessages"
	StreamsService_GetStats_FullMethodName          = "/flo.v1.StreamsService/GetStats"
	StreamsService_Flush_FullMethodName             = "/flo.v1.StreamsService/Flush"
	StreamsService_DeleteMessage_FullMethodName     = "/flo.v1.StreamsService/DeleteMessage"
	StreamsService_ListRetryMessages_FullMethodName = "/flo.v1.StreamsService/ListRetryMessages"
	StreamsService_ListDLQMessages_FullMethodName   = "/flo.v1.StreamsService/ListDLQMessages"
	StreamsService_GetRetryDLQStats_FullMethodName  = "/flo.v1.StreamsService/GetRetryDLQStats"
)

// StreamsServiceClient is the client API for StreamsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Streams provides a pub/sub facade over EventLog.
type StreamsServiceClient interface {
	Create(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error)
	Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error)
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeResponse], error)
	Tail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeResponse], error)
	Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error)
	Nack(ctx context.Context, in *NackRequest, opts ...grpc.CallOption) (*NackResponse, error)
	ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error)
	GetStats(ctx context.Context, in *GetStreamStatsRequest, opts ...grpc.CallOption) (*GetStreamStatsResponse, error)
	Flush(ctx context.Context, in *FlushStreamRequest, opts ...grpc.CallOption) (*FlushStreamResponse, error)
	DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error)
	ListRetryMessages(ctx context.Context, in *ListRetryMessagesRequest, opts ...grpc.CallOption) (*ListRetryMessagesResponse, error)
	ListDLQMessages(ctx context.Context, in *ListDLQMessagesRequest, opts ...grpc.CallOption) (*ListDLQMessagesResponse, error)
	GetRetryDLQStats(ctx context.Context, in *GetRetryDLQStatsRequest, opts ...grpc.CallOption) (*GetRetryDLQStatsResponse, error)
}

type streamsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStreamsServiceClient(cc grpc.ClientConnInterface) StreamsServiceClient {
	return &streamsServiceClient{cc}
}

func (c *streamsServiceClient) Create(ctx context.Context, in *CreateStreamRequest, opts ...grpc.CallOption) (*CreateStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateStreamResponse)
	err := c.cc.Invoke(ctx, StreamsService_Create_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) Publish(ctx context.Context, in *PublishRequest, opts ...grpc.CallOption) (*PublishResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PublishResponse)
	err := c.cc.Invoke(ctx, StreamsService_Publish_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamsService_ServiceDesc.Streams[0], StreamsService_Subscribe_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[SubscribeRequest, SubscribeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamsService_SubscribeClient = grpc.ServerStreamingClient[SubscribeResponse]

func (c *streamsServiceClient) Tail(ctx context.Context, in *TailRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[SubscribeResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &StreamsService_ServiceDesc.Streams[1], StreamsService_Tail_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TailRequest, SubscribeResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamsService_TailClient = grpc.ServerStreamingClient[SubscribeResponse]

func (c *streamsServiceClient) Ack(ctx context.Context, in *AckRequest, opts ...grpc.CallOption) (*AckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AckResponse)
	err := c.cc.Invoke(ctx, StreamsService_Ack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) Nack(ctx context.Context, in *NackRequest, opts ...grpc.CallOption) (*NackResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(NackResponse)
	err := c.cc.Invoke(ctx, StreamsService_Nack_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) ListMessages(ctx context.Context, in *ListMessagesRequest, opts ...grpc.CallOption) (*ListMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListMessagesResponse)
	err := c.cc.Invoke(ctx, StreamsService_ListMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) GetStats(ctx context.Context, in *GetStreamStatsRequest, opts ...grpc.CallOption) (*GetStreamStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStreamStatsResponse)
	err := c.cc.Invoke(ctx, StreamsService_GetStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) Flush(ctx context.Context, in *FlushStreamRequest, opts ...grpc.CallOption) (*FlushStreamResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FlushStreamResponse)
	err := c.cc.Invoke(ctx, StreamsService_Flush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) DeleteMessage(ctx context.Context, in *DeleteMessageRequest, opts ...grpc.CallOption) (*DeleteMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteMessageResponse)
	err := c.cc.Invoke(ctx, StreamsService_DeleteMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) ListRetryMessages(ctx context.Context, in *ListRetryMessagesRequest, opts ...grpc.CallOption) (*ListRetryMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListRetryMessagesResponse)
	err := c.cc.Invoke(ctx, StreamsService_ListRetryMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) ListDLQMessages(ctx context.Context, in *ListDLQMessagesRequest, opts ...grpc.CallOption) (*ListDLQMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDLQMessagesResponse)
	err := c.cc.Invoke(ctx, StreamsService_ListDLQMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *streamsServiceClient) GetRetryDLQStats(ctx context.Context, in *GetRetryDLQStatsRequest, opts ...grpc.CallOption) (*GetRetryDLQStatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRetryDLQStatsResponse)
	err := c.cc.Invoke(ctx, StreamsService_GetRetryDLQStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StreamsServiceServer is the server API for StreamsService service.
// All implementations must embed UnimplementedStreamsServiceServer
// for forward compatibility.
//
// Streams provides a pub/sub facade over EventLog.
type StreamsServiceServer interface {
	Create(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error)
	Publish(context.Context, *PublishRequest) (*PublishResponse, error)
	Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[SubscribeResponse]) error
	Tail(*TailRequest, grpc.ServerStreamingServer[SubscribeResponse]) error
	Ack(context.Context, *AckRequest) (*AckResponse, error)
	Nack(context.Context, *NackRequest) (*NackResponse, error)
	ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error)
	GetStats(context.Context, *GetStreamStatsRequest) (*GetStreamStatsResponse, error)
	Flush(context.Context, *FlushStreamRequest) (*FlushStreamResponse, error)
	DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error)
	ListRetryMessages(context.Context, *ListRetryMessagesRequest) (*ListRetryMessagesResponse, error)
	ListDLQMessages(context.Context, *ListDLQMessagesRequest) (*ListDLQMessagesResponse, error)
	GetRetryDLQStats(context.Context, *GetRetryDLQStatsRequest) (*GetRetryDLQStatsResponse, error)
	mustEmbedUnimplementedStreamsServiceServer()
}

// UnimplementedStreamsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStreamsServiceServer struct{}

func (UnimplementedStreamsServiceServer) Create(context.Context, *CreateStreamRequest) (*CreateStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStreamsServiceServer) Publish(context.Context, *PublishRequest) (*PublishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Publish not implemented")
}
func (UnimplementedStreamsServiceServer) Subscribe(*SubscribeRequest, grpc.ServerStreamingServer[SubscribeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedStreamsServiceServer) Tail(*TailRequest, grpc.ServerStreamingServer[SubscribeResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Tail not implemented")
}
func (UnimplementedStreamsServiceServer) Ack(context.Context, *AckRequest) (*AckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ack not implemented")
}
func (UnimplementedStreamsServiceServer) Nack(context.Context, *NackRequest) (*NackResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Nack not implemented")
}
func (UnimplementedStreamsServiceServer) ListMessages(context.Context, *ListMessagesRequest) (*ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedStreamsServiceServer) GetStats(context.Context, *GetStreamStatsRequest) (*GetStreamStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedStreamsServiceServer) Flush(context.Context, *FlushStreamRequest) (*FlushStreamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (UnimplementedStreamsServiceServer) DeleteMessage(context.Context, *DeleteMessageRequest) (*DeleteMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedStreamsServiceServer) ListRetryMessages(context.Context, *ListRetryMessagesRequest) (*ListRetryMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRetryMessages not implemented")
}
func (UnimplementedStreamsServiceServer) ListDLQMessages(context.Context, *ListDLQMessagesRequest) (*ListDLQMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDLQMessages not implemented")
}
func (UnimplementedStreamsServiceServer) GetRetryDLQStats(context.Context, *GetRetryDLQStatsRequest) (*GetRetryDLQStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRetryDLQStats not implemented")
}
func (UnimplementedStreamsServiceServer) mustEmbedUnimplementedStreamsServiceServer() {}
func (UnimplementedStreamsServiceServer) testEmbeddedByValue()                        {}

// UnsafeStreamsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StreamsServiceServer will
// result in compilation errors.
type UnsafeStreamsServiceServer interface {
	mustEmbedUnimplementedStreamsServiceServer()
}

func RegisterStreamsServiceServer(s grpc.ServiceRegistrar, srv StreamsServiceServer) {
	// If the following call pancis, it indicates UnimplementedStreamsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StreamsService_ServiceDesc, srv)
}

func _StreamsService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).Create(ctx, req.(*CreateStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_Publish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).Publish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_Publish_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).Publish(ctx, req.(*PublishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamsServiceServer).Subscribe(m, &grpc.GenericServerStream[SubscribeRequest, SubscribeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamsService_SubscribeServer = grpc.ServerStreamingServer[SubscribeResponse]

func _StreamsService_Tail_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TailRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamsServiceServer).Tail(m, &grpc.GenericServerStream[TailRequest, SubscribeResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type StreamsService_TailServer = grpc.ServerStreamingServer[SubscribeResponse]

func _StreamsService_Ack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).Ack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_Ack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).Ack(ctx, req.(*AckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_Nack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NackRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).Nack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_Nack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).Nack(ctx, req.(*NackRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_ListMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).ListMessages(ctx, req.(*ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStreamStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).GetStats(ctx, req.(*GetStreamStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushStreamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_Flush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).Flush(ctx, req.(*FlushStreamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_DeleteMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).DeleteMessage(ctx, req.(*DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_ListRetryMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRetryMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).ListRetryMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_ListRetryMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).ListRetryMessages(ctx, req.(*ListRetryMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_ListDLQMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDLQMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).ListDLQMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_ListDLQMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).ListDLQMessages(ctx, req.(*ListDLQMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StreamsService_GetRetryDLQStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRetryDLQStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StreamsServiceServer).GetRetryDLQStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StreamsService_GetRetryDLQStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StreamsServiceServer).GetRetryDLQStats(ctx, req.(*GetRetryDLQStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StreamsService_ServiceDesc is the grpc.ServiceDesc for StreamsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StreamsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "flo.v1.StreamsService",
	HandlerType: (*StreamsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StreamsService_Create_Handler,
		},
		{
			MethodName: "Publish",
			Handler:    _StreamsService_Publish_Handler,
		},
		{
			MethodName: "Ack",
			Handler:    _StreamsService_Ack_Handler,
		},
		{
			MethodName: "Nack",
			Handler:    _StreamsService_Nack_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _StreamsService_ListMessages_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _StreamsService_GetStats_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _StreamsService_Flush_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _StreamsService_DeleteMessage_Handler,
		},
		{
			MethodName: "ListRetryMessages",
			Handler:    _StreamsService_ListRetryMessages_Handler,
		},
		{
			MethodName: "ListDLQMessages",
			Handler:    _StreamsService_ListDLQMessages_Handler,
		},
		{
			MethodName: "GetRetryDLQStats",
			Handler:    _StreamsService_GetRetryDLQStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Subscribe",
			Handler:       _StreamsService_Subscribe_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Tail",
			Handler:       _StreamsService_Tail_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "flo/v1/streams.proto",
}
